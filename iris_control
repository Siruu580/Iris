#!/bin/bash

IRIS_PROCESS_NAME="qwer"
IRIS_PROCESS_KEYWORD="app_process"
IRIS_START_COMMAND="adb shell 'su root sh -c \"CLASSPATH=/data/local/tmp/Iris.apk app_process / party.qwer.iris.Main > /dev/null 2>&1\"' &"
IRIS_APK_URL="https://github.com/dolidolih/Iris/releases/download/v0.14/Iris.apk"
IRIS_APK_PATH="/data/local/tmp/Iris.apk"
IRIS_APK_LOCAL_FILE="Iris.apk"

check_adb_installed() {
  if ! command -v adb &> /dev/null
  then
    echo "adb is not installed. Please install adb and add it to your PATH."
    echo "You can usually install it with your system's package manager (e.g., apt install adb, brew install android-platform-tools)."
    return 1
  fi
  return 0
}

check_adb_device() {
  adb devices > /dev/null 2>&1
  adb devices | grep -q "device"
  if [ $? -ne 0 ]; then
    echo "No device found. Please ensure your Android device is connected via USB or network."
    read -p "If using network, enter device IP address: " device_ip
    if [ -n "$device_ip" ]; then
      adb connect "$device_ip"
      sleep 3
      adb devices | grep -q "device"
      if [ $? -ne 0 ]; then
        echo "Failed to connect to device at $device_ip. Please check IP and device status."
        return 1
      else
        echo "Successfully connected to device at $device_ip."
        return 0
      fi
    else
      echo "No device IP provided. Please connect a device."
      return 1
    fi
  else
    return 0
  fi
}

get_iris_pid() {
  check_adb_device || return 1
  pid=$(adb shell ps -f | grep "$IRIS_PROCESS_NAME" | grep "$IRIS_PROCESS_KEYWORD" | grep -v 'sh -c' | awk '{print $2}')
  echo "$pid"
}

iris_status() {
  check_adb_device || return 1
  pid=$(get_iris_pid)
  if [ -n "$pid" ]; then
    echo "Iris is working. PID: $pid"
  else
    echo "Iris is not running."
  fi
}

iris_start() {
  check_adb_device || return 1
  pid=$(get_iris_pid)
  if [ -n "$pid" ]; then
    echo "Iris is already running."
  else
    echo "Starting Iris service..."
    eval "$IRIS_START_COMMAND"
    sleep 2
    new_pid=$(get_iris_pid)
    if [ -n "$new_pid" ]; then
      echo "Iris service started. PID: $new_pid"
    else
      echo "Failed to start Iris service."
    fi
  fi
}

iris_stop() {
  check_adb_device || return 1
  pid=$(get_iris_pid)
  if [ -n "$pid" ]; then
    echo "Stopping Iris service..."
    adb shell "su root sh -c 'kill -s SIGKILL $pid'"
    sleep 1
    stopped_pid=$(get_iris_pid)
    if [ -z "$stopped_pid" ]; then
      echo "Iris service stopped."
    else
      echo "Failed to stop Iris service (PID: $pid) may still be running."
    fi
  else
    echo "Iris is not running."
  fi
}

iris_install() {
  check_adb_installed || return 1
  check_adb_device || return 1

  echo "Downloading Iris.apk..."
  if curl -Lo "$IRIS_APK_LOCAL_FILE" "$IRIS_APK_URL"; then
    echo "Download completed."
  elif wget -O "$IRIS_APK_LOCAL_FILE" "$IRIS_APK_URL"; then
    echo "Download completed."
  else
    echo "Failed to download Iris.apk. Please check the URL and your internet connection."
    return 1
  fi

  echo "Pushing Iris.apk to device..."
  adb push "$IRIS_APK_LOCAL_FILE" "$IRIS_APK_PATH"
  if [ $? -ne 0 ]; then
    echo "Failed to push Iris.apk to /data/local/tmp. Check adb connection and permissions."
    return 1
  fi

  echo "Verifying installation..."
  adb shell "ls $IRIS_APK_PATH" > /dev/null 2>&1
  if [ $? -eq 0 ]; then
    echo "Installation completed!"
  else
    echo "Installation verification failed. File might not be in /data/local/tmp."
  fi
}


case "$1" in
  status)
    iris_status
    ;;
  start)
    iris_start
    ;;
  stop)
    iris_stop
    ;;
  install)
    iris_install
    ;;
  *)
    echo "Usage: $0 {status|start|stop|install}"
    exit 1
    ;;
esac

exit 0